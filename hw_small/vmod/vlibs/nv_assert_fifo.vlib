// ================================================================
// NVDLA Open Source Project
// 
// Copyright(c) 2016 - 2017 NVIDIA Corporation.  Licensed under the
// NVDLA Open Hardware License; Check "LICENSE" which comes with 
// this distribution for more information.
// ================================================================

// File Name: nv_assert_fifo.vlib

`ifdef MACROMODULE
macromodule nv_assert_fifo (
`else
module nv_assert_fifo (
`endif
  clk, 
  reset_, 
  push,
  pop
`ifdef FV_ASSERT_ON
  , err
`endif
);

//VCS coverage exclude_module

  parameter severity_level = 0;
  parameter depth=7;
  parameter initial_cnt=0;
  parameter options = 0;
`ifdef DISABLE_ASSERT_MSG
  parameter [0:0] msg="";
`else
  `ifdef TRUNCATE_ASSERT_MSG
    parameter [64*8-1:0] msg="VIOLATION";
  `else
    parameter msg="VIOLATION";
  `endif
`endif

  input clk;
  input reset_;
  input push;
  input pop;

`ifndef EMU

`ifdef FV_ASSERT_ON
  output err;

  reg err;
`else

`ifndef SYNTHESIS

//  parameter assert_name = "ASSERT_FIFO";

  integer error_count;
  initial error_count = 0;

  `include "assertion_task.vh"
  `include "assertion_header.vh"

  `ifdef ASSERT_INIT_MSG
    initial
      assertion_init_msg; // Call the User Defined Init Message Routine
  `endif
  `ifdef ASSERT_ENABLE_ZERROR
   initial begin
           #1000;
           if (push === 1'bz) begin
             $display("ZERROR: %m (%t) : Fix the unconnected push to this assertion.", $time);
             `ifdef ASSERT_EXIT_ON_ZERROR
                $finish;
             `endif
           end
   end
   initial begin
           #1000;
           if (pop === 1'bz) begin
             $display("ZERROR: %m (%t) : Fix the unconnected pop to this assertion.", $time);
             `ifdef ASSERT_EXIT_ON_ZERROR
                $finish;
             `endif
           end
   end
  `endif

`endif
`endif

`ifndef SYNTHESIS
`ifdef ASSERT_ENABLE_ZERROR
initial begin
          #1000;
          if ((reset_ === 1'bz)) begin
              $display("ZERROR: %m (%t) : Fix the unconnected reset to this assertion.", $time);
              `ifdef ASSERT_EXIT_ON_ZERROR
               $finish;
              `endif
          end
end
`endif
`endif

`define LOG2_DEPTH (depth>=64  ? 32: \
                   (depth>=32  ?  6: \
                   (depth>=16  ?  5: \
                   (depth>=8   ?  4: \
                   (depth>=4   ?  3: \
                   (depth>=2   ?  2: \
                                 1  \
                   ))))))

  reg [`LOG2_DEPTH-1:0] cnt;

`ifdef FV_ASSERT_SYNCH_RESET
always @(posedge clk) begin
`else
always @(posedge clk or negedge reset_) begin
`endif
      if (~reset_) begin
           cnt<= initial_cnt;
         `ifdef FV_ASSERT_ON
           err <= 1'b0;
         `endif
      end else begin   
          cnt <=  cnt + push - pop;
          if ( (cnt==depth &  push & !pop) ||
	       (cnt==0     & !push &  pop) ) begin
            `ifdef FV_ASSERT_ON
              err <= 1'b1;
            `else
              assertion_error;
            `endif
          end
      end
  end

`endif // EMU

// Instantiating a dummy buffer
// CKBD4 UI_DummyBuf (.I(clk), .Z());
// inside the assertion vlib, so that 
// the assertion module is NOT optimized away 
// during DC & RC emulation physical synthesis
 
// Also adding embedded DC and RC dont-touch settings
// on the assertion module

`ifdef EMU

 CKBD4 UI_DummyBuf (.I(clk), .Z());

// synopsys dc_script_begin
// synopsys dc_script_end

// g2c if { [find / -null_ok -subdesign nv_assert_fifo*] != {} } { set_attr preserve 1 [find / -subdesign nv_assert_fifo*] }

`endif // ifdef EMU

`ifdef FV_ASSERT_ON 
 `include "common_sva_assert.sva"
`endif

endmodule
